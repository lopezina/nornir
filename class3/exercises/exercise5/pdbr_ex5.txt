# Capture of pdbr session
# Doesn't really do it justice since all of the color highlighting is lost

$ python -m pdbr exercise4.py 
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(1)<module>()
----> 1 from pprint import pprint
      2 from nornir import InitNornir
      3 from nornir.core.filter import F
      4 from nornir_netmiko import netmiko_send_command
      5 

(Pdbr) list
❱  1 from pprint import pprint                                                                         
   2 from nornir import InitNornir                                                                     
   3 from nornir.core.filter import F                                                                  
   4 from nornir_netmiko import netmiko_send_command                                                   
   5                                                                                                   
   6                                                                                                   
   7 def main():                                                                                       
   8     # Exercise 4a                                                                                 
   9     nr = InitNornir(config_file="config.yaml")                                                    
  10     # Exercise 4b                                                                                 
  11     nr = nr.filter(F(groups__contains="eos"))                                                     
(Pdbr) ll
❱  1 from pprint import pprint                                                                         
   2 from nornir import InitNornir                                                                     
   3 from nornir.core.filter import F                                                                  
   4 from nornir_netmiko import netmiko_send_command                                                   
   5                                                                                                   
   6                                                                                                   
   7 def main():                                                                                       
   8     # Exercise 4a                                                                                 
   9     nr = InitNornir(config_file="config.yaml")                                                    
  10     # Exercise 4b                                                                                 
  11     nr = nr.filter(F(groups__contains="eos"))                                                     
  12     agg_result = nr.run(                                                                          
  13         task=netmiko_send_command, command_string="show int status", use_textfsm=True             
  14     )                                                                                             
  15                                                                                                   
  16     # Verify structured data (pick a device and check)                                            
  17     print()                                                                                       
  18     print("Exercise 4b - verify structured data")                                                 
  19     print("-" * 20)                                                                               
  20     print(type(agg_result["arista1"][0].result))                                                  
  21     print("-" * 20)                                                                               
  22                                                                                                   
  23     print("\nExercise 4c - final dictionary")                                                     
  24     print("-" * 20)                                                                               
  25     combined_data = {}                                                                            
  26     for device_name, multi_result in agg_result.items():                                          
  27         combined_data[device_name] = {}                                                           
  28         device_result = multi_result[0]                                                           
  29         for intf_dict in device_result.result:                                                    
  30             intf_name = intf_dict["port"]                                                         
  31             inner_dict = {}                                                                       
  32             inner_dict["status"] = intf_dict["status"]                                            
  33             inner_dict["vlan"] = intf_dict["vlan"]                                                
  34             combined_data[device_name][intf_name] = inner_dict                                    
  35     pprint(combined_data)                                                                         
  36     print("-" * 20)                                                                               
  37     print()                                                                                       
  38                                                                                                   
  39                                                                                                   
  40 if __name__ == "__main__":                                                                        
  41     main()                                                                                        
  42                                                                                                   
(Pdbr) n
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(2)<module>()
      1 from pprint import pprint
----> 2 from nornir import InitNornir
      3 from nornir.core.filter import F
      4 from nornir_netmiko import netmiko_send_command
      5 

(Pdbr) n
n
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(3)<module>()
      1 from pprint import pprint
      2 from nornir import InitNornir
----> 3 from nornir.core.filter import F
      4 from nornir_netmiko import netmiko_send_command
      5 

(Pdbr) n
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(4)<module>()
      2 from nornir import InitNornir
      3 from nornir.core.filter import F
----> 4 from nornir_netmiko import netmiko_send_command
      5 
      6 

(Pdbr) n
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(7)<module>()
      5 
      6 
----> 7 def main():
      8     # Exercise 4a
      9     nr = InitNornir(config_file="config.yaml")

(Pdbr) n
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(40)<module>()
     37     print()
     38 
     39 
---> 40 if __name__ == "__main__":
     41     main()

(Pdbr) n
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(41)<module>()
     37     print()
     38 
     39 
     40 if __name__ == "__main__":
---> 41     main()

(Pdbr) s
--Call--
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(7)main()
      5 
      6 
----> 7 def main():
      8     # Exercise 4a
      9     nr = InitNornir(config_file="config.yaml")

(Pdbr) s
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(9)main()
      7 def main():
      8     # Exercise 4a
----> 9     nr = InitNornir(config_file="config.yaml")
     10     # Exercise 4b
     11     nr = nr.filter(F(groups__contains="eos"))

(Pdbr) s
--Call--
> /home/ktbyers/VENV/py3_venv/lib64/python3.7/site-packages/nornir/init_nornir.py(38)InitNornir()
     36 
     37 
---> 38 def InitNornir(config_file: str = "", dry_run: bool = False, **kwargs: Any,) -> Nornir:
     39     """
     40     Arguments:

(Pdbr) list
  33     runner_plugin = RunnersPluginRegister.get_plugin(config.runner.plugin)                        
  34     runner = runner_plugin(**config.runner.options)                                               
  35     return runner                                                                                 
  36                                                                                                   
  37                                                                                                   
❱ 38 def InitNornir(config_file: str = "", dry_run: bool = False, **kwargs: Any,) -> Nornir:           
  39     """                                                                                           
  40     Arguments:                                                                                    
  41         config_file(str): Path to the configuration file (optional)                               
  42         dry_run(bool): Whether to simulate changes or not                                         
  43         configure_logging: Whether to configure logging or not. This argument is being            
(Pdbr) u
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(9)main()
      7 def main():
      8     # Exercise 4a
----> 9     nr = InitNornir(config_file="config.yaml")
     10     # Exercise 4b
     11     nr = nr.filter(F(groups__contains="eos"))

(Pdbr) next
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(11)main()
      9     nr = InitNornir(config_file="config.yaml")
     10     # Exercise 4b
---> 11     nr = nr.filter(F(groups__contains="eos"))
     12     agg_result = nr.run(
     13         task=netmiko_send_command, command_string="show int status", use_textfsm=True

(Pdbr) p nr
<nornir.core.Nornir object at 0x7f97fd5f5d50>
(Pdbr) pp nr.inventory.hosts
{
│   'cisco3': Host: cisco3,
│   'cisco4': Host: cisco4,
│   'nxos1': Host: nxos1,
│   'nxos2': Host: nxos2,
│   'arista1': Host: arista1,
│   'arista2': Host: arista2,
│   'arista3': Host: arista3,
│   'arista4': Host: arista4,
│   'srx2': Host: srx2
}
(Pdbr) n
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(12)main()
     10     # Exercise 4b
     11     nr = nr.filter(F(groups__contains="eos"))
---> 12     agg_result = nr.run(
     13         task=netmiko_send_command, command_string="show int status", use_textfsm=True
     14     )

(Pdbr) pp nr.inventory.hosts
{
│   'arista1': Host: arista1,
│   'arista2': Host: arista2,
│   'arista3': Host: arista3,
│   'arista4': Host: arista4
}
(Pdbr) !temp = "some string"
(Pdbr) p temp
'some string'
(Pdbr) l
   7 def main():                                                                                       
   8     # Exercise 4a                                                                                 
   9     nr = InitNornir(config_file="config.yaml")                                                    
  10     # Exercise 4b                                                                                 
  11     nr = nr.filter(F(groups__contains="eos"))                                                     
❱ 12     agg_result = nr.run(                                                                          
  13         task=netmiko_send_command, command_string="show int status", use_textfsm=True             
  14     )                                                                                             
  15                                                                                                   
  16     # Verify structured data (pick a device and check)                                            
  17     print()                                                                                       
(Pdbr) b 34
Breakpoint 1 at /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py:34
(Pdbr) ll
   1 from pprint import pprint                                                                         
   2 from nornir import InitNornir                                                                     
   3 from nornir.core.filter import F                                                                  
   4 from nornir_netmiko import netmiko_send_command                                                   
   5                                                                                                   
   6                                                                                                   
   7 def main():                                                                                       
   8     # Exercise 4a                                                                                 
   9     nr = InitNornir(config_file="config.yaml")                                                    
  10     # Exercise 4b                                                                                 
  11     nr = nr.filter(F(groups__contains="eos"))                                                     
❱ 12     agg_result = nr.run(                                                                          
  13         task=netmiko_send_command, command_string="show int status", use_textfsm=True             
  14     )                                                                                             
  15                                                                                                   
  16     # Verify structured data (pick a device and check)                                            
  17     print()                                                                                       
  18     print("Exercise 4b - verify structured data")                                                 
  19     print("-" * 20)                                                                               
  20     print(type(agg_result["arista1"][0].result))                                                  
  21     print("-" * 20)                                                                               
  22                                                                                                   
  23     print("\nExercise 4c - final dictionary")                                                     
  24     print("-" * 20)                                                                               
  25     combined_data = {}                                                                            
  26     for device_name, multi_result in agg_result.items():                                          
  27         combined_data[device_name] = {}                                                           
  28         device_result = multi_result[0]                                                           
  29         for intf_dict in device_result.result:                                                    
  30             intf_name = intf_dict["port"]                                                         
  31             inner_dict = {}                                                                       
  32             inner_dict["status"] = intf_dict["status"]                                            
  33             inner_dict["vlan"] = intf_dict["vlan"]                                                
  34             combined_data[device_name][intf_name] = inner_dict                                    
  35     pprint(combined_data)                                                                         
  36     print("-" * 20)                                                                               
  37     print()                                                                                       
  38                                                                                                   
  39                                                                                                   
  40 if __name__ == "__main__":                                                                        
  41     main()                                                                                        
  42                                                                                                   
(Pdbr) continue

Exercise 4b - verify structured data
--------------------
<class 'list'>
--------------------

Exercise 4c - final dictionary
--------------------
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(34)main()
     32             inner_dict["status"] = intf_dict["status"]
     33             inner_dict["vlan"] = intf_dict["vlan"]
1--> 34             combined_data[device_name][intf_name] = inner_dict
     35     pprint(combined_data)
     36     print("-" * 20)

(Pdbr) continue
> /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py(34)main()
     32             inner_dict["status"] = intf_dict["status"]
     33             inner_dict["vlan"] = intf_dict["vlan"]
1--> 34             combined_data[device_name][intf_name] = inner_dict
     35     pprint(combined_data)
     36     print("-" * 20)

(Pdbr) pp combined_data
{'arista1': {'Et1': {'status': 'connected', 'vlan': '1'}}}
(Pdbr) list
  29         for intf_dict in device_result.result:                                                    
  30             intf_name = intf_dict["port"]                                                         
  31             inner_dict = {}                                                                       
  32             inner_dict["status"] = intf_dict["status"]                                            
  33             inner_dict["vlan"] = intf_dict["vlan"]                                                
❱ 34             combined_data[device_name][intf_name] = inner_dict                                    
  35     pprint(combined_data)                                                                         
  36     print("-" * 20)                                                                               
  37     print()                                                                                       
  38                                                                                                   
  39                                                                                                   
(Pdbr) clear 1
Deleted breakpoint 1 at /home/ktbyers/nornir_course/class3/exercises/exercise4/exercise4.py:34
(Pdbr) continue
{'arista1': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'},
             'Ma1': {'status': 'disabled', 'vlan': 'routed'}},
 'arista2': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'},
             'Ma1': {'status': 'disabled', 'vlan': 'routed'}},
 'arista3': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'},
             'Ma1': {'status': 'disabled', 'vlan': 'routed'}},
 'arista4': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'},
             'Ma1': {'status': 'disabled', 'vlan': 'routed'}}}
--------------------
