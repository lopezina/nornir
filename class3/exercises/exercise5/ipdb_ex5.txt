$ python -m ipdb exercise5.py
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(1)<module>()
----> 1 from pprint import pprint
      2 from nornir import InitNornir
      3 from nornir.core.filter import F

ipdb> list
----> 1 from pprint import pprint
      2 from nornir import InitNornir
      3 from nornir.core.filter import F
      4 from nornir.plugins.tasks.networking import netmiko_send_command
      5 
      6 
      7 def main():
      8     # Exercise 4a
      9     nr = InitNornir(config_file="config.yaml")
     10     # Exercise 4b
     11     nr = nr.filter(F(groups__contains="eos"))

ipdb> list 30, 41
     30             intf_name = intf_dict["port"]
     31             inner_dict = {}
     32             inner_dict["status"] = intf_dict["status"]
     33             inner_dict["vlan"] = intf_dict["vlan"]
     34             combined_data[device_name][intf_name] = inner_dict
     35     pprint(combined_data)
     36     print("-" * 20)
     37     print()
     38 
     39 
     40 if __name__ == "__main__":
     41     main()

ipdb> next
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(2)<module>()
      1 from pprint import pprint
----> 2 from nornir import InitNornir
      3 from nornir.core.filter import F

ipdb> next
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(3)<module>()
      2 from nornir import InitNornir
----> 3 from nornir.core.filter import F
      4 from nornir.plugins.tasks.networking import netmiko_send_command

ipdb> n
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(4)<module>()
      3 from nornir.core.filter import F
----> 4 from nornir.plugins.tasks.networking import netmiko_send_command
      5 

ipdb> n
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(7)<module>()
      6 
----> 7 def main():
      8     # Exercise 4a

ipdb> n 
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(40)<module>()
     39 
---> 40 if __name__ == "__main__":
     41     main()

ipdb> n
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(41)<module>()
     39 
     40 if __name__ == "__main__":
---> 41     main()

ipdb> step
--Call--
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(7)main()
      6 
----> 7 def main():
      8     # Exercise 4a

ipdb> step
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(9)main()
      8     # Exercise 4a
----> 9     nr = InitNornir(config_file="config.yaml")
     10     # Exercise 4b

ipdb> step
--Call--
> /home/student1/VENV/py3_venv/local/lib/python3.6/site-packages/nornir/init_nornir.py(23)InitNornir()
     22 
---> 23 def InitNornir(
     24     config_file: str = "",

ipdb> list
     18 
     19 def cls_to_string(cls: Callable[..., Any]) -> str:
     20     return f"{cls.__module__}.{cls.__name__}"
     21 
     22 
---> 23 def InitNornir(
     24     config_file: str = "",
     25     dry_run: bool = False,
     26     configure_logging: Optional[bool] = None,
     27     **kwargs: Dict[str, Any],
     28 ) -> Nornir:

ipdb> up
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(9)main()
      8     # Exercise 4a
----> 9     nr = InitNornir(config_file="config.yaml")
     10     # Exercise 4b

ipdb> next
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(11)main()
     10     # Exercise 4b
---> 11     nr = nr.filter(F(groups__contains="eos"))
     12     agg_result = nr.run(

ipdb> p nr
<nornir.core.Nornir object at 0x7f2099f2abe0>
ipdb> pp nr.inventory.hosts
{'arista1': Host: arista1,
 'arista2': Host: arista2,
 'arista3': Host: arista3,
 'arista4': Host: arista4,
 'cisco3': Host: cisco3,
 'cisco4': Host: cisco4,
 'nxos1': Host: nxos1,
 'nxos2': Host: nxos2,
 'srx2': Host: srx2}

ipdb> n
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(12)main()
     11     nr = nr.filter(F(groups__contains="eos"))
---> 12     agg_result = nr.run(
     13         task=netmiko_send_command, command_string="show int status", use_textfsm=True

ipdb> pp nr.inventory.hosts
{'arista1': Host: arista1,
 'arista2': Host: arista2,
 'arista3': Host: arista3,
 'arista4': Host: arista4}

ipdb> !temp = 'foo'
ipdb> temp
'foo'

ipdb> b 34
Breakpoint 1 at /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py:34

ipdb> continue

Exercise 4b - verify structured data
--------------------
<class 'list'>
--------------------

Exercise 4c - final dictionary
--------------------
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(34)main()
     33             inner_dict["vlan"] = intf_dict["vlan"]
1--> 34             combined_data[device_name][intf_name] = inner_dict
     35     pprint(combined_data)

ipdb> continue
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(34)main()
     33             inner_dict["vlan"] = intf_dict["vlan"]
1--> 34             combined_data[device_name][intf_name] = inner_dict
     35     pprint(combined_data)

ipdb> pp combined_data
{'arista1': {'Et1': {'status': 'connected', 'vlan': '1'}}}

ipdb> list
     29         for intf_dict in device_result.result:
     30             intf_name = intf_dict["port"]
     31             inner_dict = {}
     32             inner_dict["status"] = intf_dict["status"]
     33             inner_dict["vlan"] = intf_dict["vlan"]
1--> 34             combined_data[device_name][intf_name] = inner_dict
     35     pprint(combined_data)
     36     print("-" * 20)
     37     print()
     38 
     39 

ipdb> clear 1
Deleted breakpoint 1 at /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py:34

ipdb> c                                                                                                                                                                      
{'arista1': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'}},
 'arista2': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'}},
 'arista3': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'}},
 'arista4': {'Et1': {'status': 'connected', 'vlan': '1'},
             'Et2': {'status': 'connected', 'vlan': '2'},
             'Et3': {'status': 'connected', 'vlan': '3'},
             'Et4': {'status': 'connected', 'vlan': '4'},
             'Et5': {'status': 'connected', 'vlan': '5'},
             'Et6': {'status': 'connected', 'vlan': '6'},
             'Et7': {'status': 'connected', 'vlan': '7'}}}
--------------------

The program finished and will be restarted
> /home/student1/nornir_course/class3/exercises/exercise5/exercise5.py(1)<module>()
----> 1 from pprint import pprint
      2 from nornir import InitNornir
      3 from nornir.core.filter import F

ipdb> exit
